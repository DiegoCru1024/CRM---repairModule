// <auto-generated />
using System;
using Infrastructure.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Persistence.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231109080442_PersistenceInitial")]
    partial class PersistenceInitial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Diagnosis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("OfferedService")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("RepairOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RepairOrderId");

                    b.ToTable("diagnoses", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.DiagnosisSparePart", b =>
                {
                    b.Property<Guid>("DiagnosisId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SparePartId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("DiagnosisId", "SparePartId");

                    b.HasIndex("SparePartId");

                    b.ToTable("diagnoses_spare_parts", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.OrderStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("order_statuses", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("52ec1a9e-9711-45c4-b824-8ec28b453cb3"),
                            Name = "Esperando diagnóstico"
                        },
                        new
                        {
                            Id = new Guid("52c7c858-ead7-42a0-9400-15f96e7e920c"),
                            Name = "En confirmación"
                        },
                        new
                        {
                            Id = new Guid("986a5551-b1d4-442c-9bf4-5f2ee360f4e2"),
                            Name = "En reparación"
                        },
                        new
                        {
                            Id = new Guid("474fb0e1-115d-44d4-9ae0-ba6dec7934da"),
                            Name = "Listo"
                        },
                        new
                        {
                            Id = new Guid("e25ebe6b-be50-4d22-805a-44377b4de8ae"),
                            Name = "Cancelado"
                        });
                });

            modelBuilder.Entity("Domain.Entities.RepairOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("AttendedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ClosedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Discount")
                        .HasColumnType("real");

                    b.Property<Guid>("RepairRequestId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<float>("SubTotal")
                        .HasColumnType("real");

                    b.Property<float>("Total")
                        .HasColumnType("real");

                    b.Property<bool>("WarrantyEligible")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("RepairRequestId")
                        .IsUnique();

                    b.HasIndex("StatusId");

                    b.ToTable("repair_orders", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.RepairRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ContactEmailInfo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("DeviceStatus")
                        .HasColumnType("integer");

                    b.Property<string>("Motive")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PurchaseOrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RepairOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<string>("WarrantyId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("repair_requests", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.RequestStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("request_statuses", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("56626b64-485b-458a-99fb-cdb5b635526e"),
                            Name = "Pendiente"
                        },
                        new
                        {
                            Id = new Guid("a2a674ed-e4ae-4fbc-bb1f-29b5122e1c88"),
                            Name = "Notificado"
                        },
                        new
                        {
                            Id = new Guid("922ff6a9-ad99-4b78-8826-fc2136829e53"),
                            Name = "En progreso"
                        },
                        new
                        {
                            Id = new Guid("5bf32584-8ba2-467d-b7a1-e354217e6c3b"),
                            Name = "Solventado"
                        },
                        new
                        {
                            Id = new Guid("4f1c8ca2-c62d-444d-b711-0cc386647d83"),
                            Name = "Cancelado"
                        });
                });

            modelBuilder.Entity("Domain.Entities.SparePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("spare_parts", "dbo");
                });

            modelBuilder.Entity("Domain.Entities.Diagnosis", b =>
                {
                    b.HasOne("Domain.Entities.RepairOrder", "RepairOrder")
                        .WithMany("Diagnoses")
                        .HasForeignKey("RepairOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepairOrder");
                });

            modelBuilder.Entity("Domain.Entities.DiagnosisSparePart", b =>
                {
                    b.HasOne("Domain.Entities.Diagnosis", "Diagnosis")
                        .WithMany("DiagnosisSpareParts")
                        .HasForeignKey("DiagnosisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SparePart", "SparePart")
                        .WithMany("DiagnosisSpareParts")
                        .HasForeignKey("SparePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnosis");

                    b.Navigation("SparePart");
                });

            modelBuilder.Entity("Domain.Entities.RepairOrder", b =>
                {
                    b.HasOne("Domain.Entities.RepairRequest", "RepairRequest")
                        .WithOne("RepairOrder")
                        .HasForeignKey("Domain.Entities.RepairOrder", "RepairRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.OrderStatus", "Status")
                        .WithMany("RepairOrders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RepairRequest");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Entities.RepairRequest", b =>
                {
                    b.HasOne("Domain.Entities.RequestStatus", "Status")
                        .WithMany("RepairRequests")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Domain.Entities.Diagnosis", b =>
                {
                    b.Navigation("DiagnosisSpareParts");
                });

            modelBuilder.Entity("Domain.Entities.OrderStatus", b =>
                {
                    b.Navigation("RepairOrders");
                });

            modelBuilder.Entity("Domain.Entities.RepairOrder", b =>
                {
                    b.Navigation("Diagnoses");
                });

            modelBuilder.Entity("Domain.Entities.RepairRequest", b =>
                {
                    b.Navigation("RepairOrder")
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.RequestStatus", b =>
                {
                    b.Navigation("RepairRequests");
                });

            modelBuilder.Entity("Domain.Entities.SparePart", b =>
                {
                    b.Navigation("DiagnosisSpareParts");
                });
#pragma warning restore 612, 618
        }
    }
}
